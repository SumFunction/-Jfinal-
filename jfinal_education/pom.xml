<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>com.lrr</groupId>
  <artifactId>jfinal_education</artifactId>
  <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>
<!--  <packaging>war</packaging>-->

  <name>jfinal_education Maven Webapp</name>


  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <maven.compiler.source>8</maven.compiler.source>
    <maven.compiler.target>8</maven.compiler.target>
  </properties>

  <!-- 使用阿里 maven 库 -->
  <repositories>
    <repository>
      <id>ali-maven</id>
      <url>http://maven.aliyun.com/nexus/content/groups/public</url>
      <releases>
        <enabled>true</enabled>
      </releases>
      <snapshots>
        <enabled>true</enabled>
        <updatePolicy>always</updatePolicy>
        <checksumPolicy>fail</checksumPolicy>
      </snapshots>
    </repository>
  </repositories>
  <dependencies>
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>druid</artifactId>
      <version>1.1.10</version>
    </dependency>
    <dependency>
      <groupId>mysql</groupId>
      <artifactId>mysql-connector-java</artifactId>
      <version>8.0.18</version>
    </dependency>
    <dependency>
      <groupId>com.jfinal</groupId>
      <artifactId>jfinal-undertow</artifactId>
      <version>2.8</version>
    </dependency>
    <dependency>
      <groupId>com.jfinal</groupId>
      <artifactId>jfinal</artifactId>
      <version>4.9.21</version>
    </dependency>
    <dependency>
      <groupId>net.sf.json-lib</groupId>
      <artifactId>json-lib</artifactId>
      <version>2.4</version>
      <!--一定要加包的版本，否则引入的包无法使用-->
      <classifier>jdk15</classifier>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
      <version>1.3.1</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>easyexcel</artifactId>
      <version>2.1.3</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun</groupId>
      <artifactId>aliyun-sdk-vod-upload</artifactId>
      <version>1.4.11</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun</groupId>
      <artifactId>aliyun-java-sdk-vod</artifactId>
      <version>2.15.2</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun</groupId>
      <artifactId>aliyun-java-sdk-core</artifactId>
      <version>4.3.3</version>
    </dependency>
    <dependency>
      <groupId>com.aliyun.oss</groupId>
      <artifactId>aliyun-sdk-oss</artifactId>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>com.alibaba</groupId>
      <artifactId>fastjson</artifactId>
      <version>1.2.28</version>
    </dependency>
    <dependency>
      <groupId>com.alipay.sdk</groupId>
      <artifactId>alipay-sdk-java</artifactId>
      <version>4.22.49.ALL</version>
    </dependency>
    <dependency>
      <groupId>joda-time</groupId>
      <artifactId>joda-time</artifactId>
      <version> 2.10.1</version>
    </dependency>
    <dependency>
      <groupId>io.jsonwebtoken</groupId>
      <artifactId>jjwt</artifactId>
      <version>0.7.0</version>
    </dependency>
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache-core</artifactId>
      <version>2.6.10</version>
    </dependency>

  </dependencies>

  <build>
    <!--
                添加 includes 配置后，excludes 默认为所有文件 **/*.*，反之亦然
                该规则在 maven-jar-plugin 等插件中同样适用
            -->
    <resources>
      <!-- 添加该配置是为了将 .sql 文件打入 jar 包 -->
      <resource>
        <directory>src/main/java</directory>
        <includes>
          <!-- **/* 前缀用法，可以匹配所有路径 -->
          <include>**/*.sql</include>
        </includes>
      </resource>

      <!--
          没有添加 resources 配置时，src/main/resources 目录是默认配置
          一旦添加 resources 配置指向 src/main/java 目录时，原先的默认配置被取代，
          所以需要添加如下配置将默认配置再添加进来，否则无法使用 src/main/resources
          下的资源文件
      -->
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>



    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
          <encoding>UTF-8</encoding>
          <!-- java8 保留参数名编译参数 -->
          <compilerArgument>-parameters</compilerArgument>
          <compilerArguments><verbose /></compilerArguments>
        </configuration>
      </plugin>

      <!--
          jar 包中的配置文件优先级高于 config 目录下的 "同名文件"
          因此，打包时需要排除掉 jar 包中来自 src/main/resources 目录的
          配置文件，否则部署时 config 目录中的同名配置文件不会生效
       -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>2.6</version>
        <configuration>
          <excludes>
            <!--
                 *.* 用法，可以匹配 jar 包根目录下所有文件
                 *.xxx 用法，可以匹配 jar 包根目录下特定扩展名文件，例如：*.xml
                 **/* 前缀用法，可以匹配所有路径，例如：**/*.txt
            -->
            <exclude>*.*</exclude>
          </excludes>
        </configuration>
      </plugin>

      <!--
          使用 mvn clean package 打包
          更多配置可参考官方文档：http://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html
       -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <id>make-assembly</id>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>

            <configuration>
              <!-- 打包生成的文件名 -->
              <finalName>${project.artifactId}</finalName>
              <!-- jar 等压缩文件在被打包进入 zip、tar.gz 时是否压缩，设置为 false 可加快打包速度 -->
              <recompressZippedFiles>false</recompressZippedFiles>
              <!-- 打包生成的文件是否要追加 package.xml 中定义的 id 值 -->
              <appendAssemblyId>true</appendAssemblyId>
              <!-- 指向打包描述文件 package.xml -->
              <descriptors>
                <descriptor>package.xml</descriptor>
              </descriptors>
              <!-- 打包结果输出的基础目录 -->
              <outputDirectory>${project.build.directory}/</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>
</project>
